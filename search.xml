<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>javascript中字符串的大小比较</title>
    <url>/2021/04/17/javascript%E4%B8%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%A4%A7%E5%B0%8F%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"two"</span> <span class="token operator">></span> <span class="token string">"three"</span> <span class="token comment">// => true 按照ASCII码表进行比较，从小到大顺序：0-9A-Za-z</span>
<span class="token string">"a"</span> <span class="token operator">></span> <span class="token string">"99999999999999999"</span> <span class="token comment">// => true 不论长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>无论长度, 从左侧开始比较。</p>
]]></content>
      <categories>
        <category>理性</category>
      </categories>
      <tags>
        <tag>javascript,大犀牛学习日记</tag>
      </tags>
  </entry>
  <entry>
    <title>宋小宝发财日记观后感</title>
    <url>/2021/05/22/%E5%AE%8B%E5%B0%8F%E5%AE%9D%E5%8F%91%E8%B4%A2%E6%97%A5%E8%AE%B0%E8%A7%82%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<p>电影讲述了一个名字叫宋小宝的东北黑小伙跟随他的好兄弟（江湖人称二哥）到深圳打拼，一股热血就冲着发财。然而，他俩哥们到了大城市，因为没有文化，工作找不到，也没有地方住，风餐露宿，日子都只能在天桥底下度过。“发财”距离他们感觉非常遥远。但是小宝天天都在他的发财日记中记录着他的发财历程，嘴角都是挂着满足。</p>
<p>一天早上，小宝醒来睁开眼睛，发现身边躺着似乎还未满月的婴儿，是弃婴。这回，小宝和二哥这道这是摊上麻烦了。于是他们多次计划找一个地方把婴儿给丢下，看看有没有好心人收留。但是善良的小宝不忍心，就又捡了回来。他俩就这么带着孩子，二哥外出找吃，小宝带孩子。</p>
<p>直到有一天，这哥俩在公园的小湖边，救了一个满头白发老爷爷。随后老爷爷了解到小宝的情况，并且为了感恩就允许他俩住在了老爷爷的家里。碰巧老爷爷这里同样也住着一个离异的女人，叫做马露。由于一些误解，马露对小宝他俩稍有芥蒂。</p>
<p>有了落脚的地方，日子算稳定些。小宝这时候才给小孩子取名为天意，他认为这一切的相遇和经历都是上天安排，小宝嘴边依旧带着熟悉的满足的笑容。</p>
<p>此后，小宝就一边照顾着天意，一边边日复一日的找工作，做工作，换工作，再找工作。日子虽然过的很累，工作也很苦，但是淳朴的小宝并没有埋怨过生活一丝一毫。马露开始抛开对小宝的成见，他俩的关系稍稍缓和了。天意逐渐长大后，他叫小宝做爸爸，小宝为此感到所有努力都是值得的。</p>
<p>天意到了该上学的年纪，小宝为了让天意能够上学，非常努力的工作，什么苦的，累的，危险的工作都做。而长大的天意意识到自己妈妈不在身边这一回事，逐渐感到自卑，对别人的眼光敏感，更在意父亲的感受和渴望父亲的多陪伴。然后努力工作的小宝却没有留意到这一点。天意因此着感到非常孤独，一直没有妈妈的他，让他心思非常敏感，学校的孩子也经常欺负他。就这样，天意越长大越叛逆，内心也越是责怪小宝。</p>
<p>老爷爷越来越老，平时全靠小宝细心的照顾着。老爷爷眼看着，眼前这个跟自己毫无半点血缘关系的黑小伙，任劳任怨的照顾自己，眼里仿佛泛着泪光（也可能是我的泪光）。岁月不饶人，老爷爷安详的离开了人世。天意也就失去了疼爱他的爷爷了。</p>
<p>这屋就剩小宝和马露了，二哥常出去“发财”，很早就不住在这里，长大的天意时常跟社会的小混混在一起，很少回家。一晚，小宝发现隔壁马露房子里起大火，连忙生死不顾的跑进去救人，险些丧生火中。经过这件事情，两人就这么在一起了。但是天意误以为小宝是为了马露而抛弃他妈妈，冷嘲热讽的话语，让小宝一气之下，把天意赶走了。走了的还有马露。</p>
<p>这个时候的小宝才感觉到痛苦，仿佛失去了所有。</p>
<p>他的二哥回来了，这位同苦共难的好兄弟对他还是依旧的不离不弃，有困难了，回来找小宝，发财了也回来找小宝。好兄弟有困难不会羞于开口，从来都是不离不弃（人生难得一知己，我太酸了）。</p>
<p>后来天意无意间得到了小宝的那本发财日记，日记里面，没有记载怎么发财，怎么赚钱，记载的都是平平淡淡的日子，怎么抚养天意，怎么陪伴孩子的点点滴滴。天意这才了解到全部事情的经过，才知道自己深深的误解了小宝，于是拼命的赶回去。</p>
<p>这个时候，小宝因为被天意借钱的债主找上门，意外被一棍爆头，鲜血淋漓，二哥背着他到医院，这个时候天意才赶到。</p>
<p>幸好，性命保住了。</p>
<p>大难不死必有后福，孩子解除了误解，马露也回到身边，确定了关系，好兄弟一如既往的不离不弃。</p>
<p>一个圆满的结局！！</p>
<h2 id="观后感触"><a href="#观后感触" class="headerlink" title="观后感触"></a>观后感触</h2><p>故事让人感动的地方很多，比如天意和小宝，小宝和老爷爷之间没有血缘关系但是依旧真诚的爱，兄弟之间不离不弃的情感，小宝善良积极向上的人生态度等等。</p>
<p>但是然我感受最深的还是那本发财日记，电影名字就叫做发财日记，以此为题并有深意。发财日记里面，记录的并不是什么赚钱的东西，而是记录着一个人，怎么面对生活，怎么积极向上，怎么对待身边的人和事，怎么给予别人爱，和最后怎么成就生活中的爱和幸福。这些爱和幸福并不是物质上的钱财，但是这些东西却是人生中最宝贵的财富。</p>
<p>发财发财，正有此意！！！</p>
]]></content>
      <categories>
        <category>感性</category>
      </categories>
      <tags>
        <tag>情感,观后感</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript中可缺省的分号</title>
    <url>/2021/04/17/javascript%E4%B8%AD%E5%8F%AF%E7%BC%BA%E7%9C%81%E7%9A%84%E5%88%86%E5%8F%B7/</url>
    <content><![CDATA[<p>写 javascript 的都知道，代码中的分号(;)很多时候都可以省略不写的，原因是 javascript 的解析器能够自动的分隔语句。</p>
<p>例如，如果两条语句分别在两行，通常分号是可以被省略的，或者一条语句的接下来是右花括号 }，那么这里的分号也可以省略的。但是有些情况下的分号是必须的，比如如下代码：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 这里的分号可以省略</span>
b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 这里的分号可以省略</span>

c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// 这里的第一个分号是必须的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意，javascript 中并不是每一次的换行都会被当作分号，而是在不隐式的添加分号就无法解析代码的时候，才会加上分号，否则不会自动添加分号。例如，一下代码：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>javascript 解析器会将代码理解为：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> a<span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>javascript 解析器在没有显性的分号时，会尽量的解析更长的代码，直至无法正确解析时，才会隐形的添加分号。</p>
<p>因为如上原因，那么就会造成以下情况：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>程序员的本意可能时，这里是两个语句，但是 javascript 会理解为</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 解析器会尽可能的理解更长的语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>以上的这种情况，程序员的真实意图与 javascript 解析器解析出来的结果完全不一致，这种情况的问题，若果不注意，是很难发现的。</p>
<p>所以，有些情况下就会出现防御性的分号，还用上一个例子演示。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> y <span class="token operator">=</span> x <span class="token operator">+</span> f<span class="token punctuation">;</span>
<span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里的分号是一个防御性的分号，通常会出现在()或[]开头的语句中，比如;[1,2,3].join(',')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上面说到，javascript 会尽可能的理解更长的语句，但是涉及到 return，throw，yield，break 和 continue 语句时，则不然，若以上语句后面没有显性的分号且跟着换行符，解析器则会自动分隔语句，例如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>javascript 理解为</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这意味着，一定不能在 return，break 或 continue 等关键字后面的表达式之间加入换行符。</p>
]]></content>
      <categories>
        <category>理性</category>
      </categories>
      <tags>
        <tag>javascript,大犀牛学习日记</tag>
      </tags>
  </entry>
  <entry>
    <title>温故知新，两个月啃完“大犀牛”</title>
    <url>/2021/04/16/%E7%AB%8B%E5%8D%9A%E4%B8%BA%E8%AF%81%EF%BC%8C%E4%B8%A4%E4%B8%AA%E6%9C%88%E5%95%83%E5%AE%8C%E2%80%9C%E5%A4%A7%E7%8A%80%E7%89%9B%E2%80%9D/</url>
    <content><![CDATA[<p>万丈高楼平地起，需盖高楼，必须要夯实地基，地基不稳，高楼也就塌了。工作上也是一个道理，无论什么行业，若想能够在行业内走得远，站得高，就必须有一个牢固的基础。业务思维固然重要，但是一切都需要建立在基础上。</p>
<p>所以，就在刚刚，入手了一本 Javascript 大犀牛（第七版），计划能在两个月内啃完这本书，扫盲或者温故知新。每天在博客上总结记录一下学习内容。</p>
]]></content>
      <categories>
        <category>感性</category>
      </categories>
  </entry>
  <entry>
    <title>手撸 Promise 的思路分享</title>
    <url>/2022/04/07/%E4%BB%8E%E9%9B%B6%E5%AE%9E%E7%8E%B0Promise/</url>
    <content><![CDATA[<p>前段时间在几个大牛作者的微信公众号上都看到了手撸 Promise 的文章，当时就觉得挺有意思，想自己也手撸一遍顺便检验一下基础，所以我当时没有看大佬们的代码实现，怕产生潜意识。正好这段时间比较空闲，于是撸了两个版本。第一版（v1）是第一次跑通用例的版本，很粗糙；而第二版（v2）是在第一版的基础上并结合官方测试用例的测试思路优化过后的版本，是我个人比较满意的版本，它可能不是最优版本（跑完 872 条用例耗时 16s），但应该是比较直观易懂的版本。</p>
<p>这里贴出测试结果：</p>
<pre class="line-numbers language-none"><code class="language-none">...省略前面内容
   The value is &#96;1&#96; with &#96;Number.prototype&#96; modified to have a &#96;then&#96; method
     ✓ already-fulfilled
     ✓ immediately-fulfilled
     ✓ eventually-fulfilled
     ✓ already-rejected
     ✓ immediately-rejected
     ✓ eventually-rejected


 872 passing (16s)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>本文主要想跟大家分享一下实现思路，希望能够对感兴趣但没有思路的小伙伴们有帮助。</p>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>Promise 是一种机制，形象（自以为形象）的做一个比喻，Promise 机制就好像一个导水装置。这个导水装置有几个组成部分：</p>
<ol>
<li>有一个入水口 T；</li>
<li>有一个储水管道；</li>
<li>有两个出水口，分别是 F 出水口，和 R 出水口；</li>
<li>有两个拉闸 FHook 拉闸 和 RHook 和拉闸，分别控制两个出水口打开；</li>
</ol>
<p>导水装置的工作机制：</p>
<ol>
<li>出水口最开始状态都是关闭的，只能通过两个拉闸控制打开；</li>
<li>出水口永远最多只能打开一个，且开了就无法关闭，即 FHook 和 RHook 只能被拉一次（不是分别拉一次，是总共一次），多拉无效；</li>
<li>入水口 T 可以在任意时候注水；</li>
<li>注水时，如果出口没有被打开，水会存储在储水管道内，直到有一个门被打开；</li>
<li>注水时，如果出水口已开，水会直接导出，无需在储水管道内存储；</li>
<li>最先注入的水会最先被导出，导出的水不允许回收；</li>
</ol>
<p>上面的比喻是个人总结，仅仅是为了更好的帮助大家初步理解，但并不能覆盖到 Promise 所有的机制，所以到真正实现的时候，希望大家不要被这个比喻局限。下面我们尝试把原生的 Promise 代入到导水装置进行组成拆分。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 新建了一个`promise`，可理解为是一个导水装置</span>
<span class="token comment">// 初始状态，出水口都是关闭的，我们用 `pending` 来表示该状态</span>
<span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// `resolve` 就是 F 出水口的拉闸 FHook</span>
  <span class="token comment">// `reject` 就是 R 出水口的拉闸 RHook</span>
  <span class="token comment">//! 两个拉闸都是导水装置的固有组成部分，它们不能代表此时装置的状态</span>
  <span class="token comment">//! 只有真正的拉动拉闸（即方法调用），装置的状态才会改变</span>

  <span class="token comment">// 我们设置延时，1s 后再去拉闸</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 这里是 `condition` 是伪代码，模拟判断条件</span>
      <span class="token comment">// `resolve()` 表示拉动了 FHook 拉闸，F 出水口会被打开</span>
      <span class="token comment">// 我们用 `fulfilled` 来表示 F 出水口已被打开</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 第二次的拉闸动作是无效行为</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 此时的 R 出水口不可以被打开了，所以拉 RHook 也是一个无效行为</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 如果不满足 `condition` 条件，则会打开 R 出水口</span>
      <span class="token comment">// 我们用 `rejected` 来表示 R 出水口已被打开</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 同样，重复或其他拉闸操作都是无效行为</span>
      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// `promise.then` 就是导水装置的唯一入水口 T</span>
<span class="token comment">// 只能通过它来进行注水</span>
<span class="token comment">// 而 `onFulfilled` 和 `onRejected` 合起来就是一个单位的水（暂时这么理解）</span>
<span class="token comment">// 由于此时出水口还没有被打开（1s 后才拉闸），所以注入的水会被存储起来</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// do something when promise fulfilled</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// do something when promise rejected</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 我们可以在任何时候注水</span>
<span class="token comment">// 此单位的也会被存储</span>
promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
  <span class="token keyword">function</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 我们可以在任何时候注水</span>
  <span class="token comment">// 此单位的也会被存储</span>
  promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
    <span class="token keyword">function</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token keyword">function</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 我们可以在任何时候注水</span>
  <span class="token comment">// 此时出水口已被打开（2s 前被打开了），此单位的水会直接被导出，无需存储</span>
  promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>
    <span class="token keyword">function</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token keyword">function</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="初步实现"><a href="#初步实现" class="headerlink" title="初步实现"></a>初步实现</h2><p>经过上面的分析，我们现一起简单地用代码来实现这个“导水装置”。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 定义“装置”的三个状态常量</span>
<span class="token comment">// 所有出口关闭</span>
<span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">"pending"</span><span class="token punctuation">;</span>
<span class="token comment">// F 出水口已打开</span>
<span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">"fulfilled"</span><span class="token punctuation">;</span>
<span class="token comment">// R 出水口已打开</span>
<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">"rejected"</span><span class="token punctuation">;</span>

<span class="token comment">// 这里采用 Function-Type 来实现，当然也可以用Class-Type</span>
<span class="token keyword">function</span> <span class="token function">EasyPromise</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// func 是必须的，否则无法“安装拉闸”</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> func <span class="token operator">!==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"promise resolver must be a function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 安装拉闸</span>
  <span class="token function">func</span><span class="token punctuation">(</span>_resolveHook<span class="token punctuation">,</span> _rejectHook<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 初始状态</span>
  <span class="token keyword">let</span> _status <span class="token operator">=</span> <span class="token constant">PENDING</span><span class="token punctuation">;</span>
  <span class="token comment">// 这是储水管道</span>
  <span class="token keyword">let</span> _awaitQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// 入水口</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 进行储水操作</span>
      <span class="token comment">// TODO: 实现储水逻辑</span>
      _awaitQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_status <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 直接导出</span>
      <span class="token comment">// TODO: 实现 F 出水口导水逻辑</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_status <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 直接导出</span>
      <span class="token comment">// TODO: 实现 R 出水口导水逻辑</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token comment">// F 出水口拉闸 FHook</span>
  <span class="token keyword">function</span> <span class="token function">_resolveHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 忽略重复拉闸的无效行为</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 打开 F 出水口</span>
      _status <span class="token operator">=</span> <span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
      <span class="token comment">// 导出管道中的水</span>
      _awaitQueue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// do something</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// R 出水口拉闸 RHook</span>
  <span class="token keyword">function</span> <span class="token function">_rejectHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 忽略重复拉闸的无效行为</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 打开 R 出水口</span>
      _status <span class="token operator">=</span> <span class="token constant">REJECTED</span><span class="token punctuation">;</span>
      <span class="token comment">// 导出管道中的水</span>
      _awaitQueue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// do something</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上便是这个“导水装置”的大概长得样子，当然这不是 Promise 的最终的实现，这仅仅是一个“骨架”而已。要实现正真的 Promise 机制需要补充 Promise 的机制说明，我们可以阅读 <a href="https://promisesaplus.com/">Promise A+规范</a> 来补充，中文版这可以阅读这位大佬的 <a href="https://zhuanlan.zhihu.com/p/143204897">译文</a>。</p>
<p>以上就是本人的实现思路，为了能够让对 Promise 的原理感兴趣的伙伴们能够快速找到实现思路，我大胆的给出一个“形象”的比喻，希望能够帮助到大家，而没有被误导到。</p>
<h2 id="Promise-完整实现"><a href="#Promise-完整实现" class="headerlink" title="Promise 完整实现"></a>Promise 完整实现</h2><p>以下是本人手撸 Promise 机制的完整实现。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">"pending"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">"fulfilled"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">"rejected"</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">EasyPromise</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> func <span class="token operator">!==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"promise resolver must be a function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">func</span><span class="token punctuation">(</span>_resolveHook<span class="token punctuation">,</span> _rejectHook<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> _status <span class="token operator">=</span> <span class="token constant">PENDING</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> _awaitQueue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> _value<span class="token punctuation">;</span>
  <span class="token keyword">let</span> _reason<span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">then</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EasyPromise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>_status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        _awaitQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
          resolve<span class="token operator">:</span> resolveFunc<span class="token punctuation">,</span>
          reject<span class="token operator">:</span> rejectFunc<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_status <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">resolveFunc</span><span class="token punctuation">(</span>_value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_status <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">rejectFunc</span><span class="token punctuation">(</span>_reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>

      <span class="token keyword">function</span> <span class="token function">resolveFunc</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onFulfilled <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
              <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token function">_resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>

      <span class="token keyword">function</span> <span class="token function">rejectFunc</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> onRejected <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
              <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token function">_resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> promise2<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">_resolveHook</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      _value <span class="token operator">=</span> v<span class="token punctuation">;</span>
      _status <span class="token operator">=</span> <span class="token constant">FULFILLED</span><span class="token punctuation">;</span>

      _awaitQueue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> resolve <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">function</span> <span class="token function">_rejectHook</span><span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>_status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      _reason <span class="token operator">=</span> r<span class="token punctuation">;</span>
      _status <span class="token operator">=</span> <span class="token constant">REJECTED</span><span class="token punctuation">;</span>

      _awaitQueue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> reject <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">function</span> <span class="token function">_resolvePromise</span><span class="token punctuation">(</span><span class="token parameter">promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>promise2 <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">"The `promise` and `x` cannot refer to the same object."</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">let</span> lock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
            x<span class="token punctuation">,</span>
            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              <span class="token operator">!</span>lock <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span>lock <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> y<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              <span class="token operator">!</span>lock <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lock <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
          <span class="token operator">!</span>lock <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lock <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token operator">!</span>lock <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lock <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>理性</category>
      </categories>
      <tags>
        <tag>Javascript,Promise</tag>
      </tags>
  </entry>
  <entry>
    <title>《影帝的公主》观后感</title>
    <url>/2022/04/09/%E5%BD%B1%E5%B8%9D%E7%9A%84%E5%85%AC%E4%B8%BB%E8%A7%82%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<p>快乐高兴的情感多如流水般在心间轻淌而过，而凄美有遗憾的总能长久地萦绕在心头，久久不能释怀。</p>
<p>这段时间入迷地看了两部剧，一部是前面说到的《尚食》，而这次是《影帝的公主》。关于这次看的《影帝的公主》，它让我内心久久不能平复，遂写一篇观后感，以表感怀。</p>
<p>电视剧大概讲诉了这么一个故事。穆廷州是一个沉浸影视事业的影帝，他情商低，为人高冷，没有恋爱经验。有一天他和一位演艺圈新人女演员明薇合作演绎一部名叫《一代首傅》的电视剧。穆廷州由于入戏太深，不甘愿接受《一代首傅》中遗憾的结局，在杀青后的一次车祸意外中失去了所有现代记忆，而苏醒了《一代首傅》中男主角太傅的记忆，或者说是人格。此时的穆廷州对所有人包括好友和亲人都是陌生排斥的，除了在剧中饰演公主的明薇。为了帮助穆廷州恢复记忆，明薇同意陪伴在穆廷州身旁，引导他恢复记忆。但是，在这个恢复记忆过程，明薇却因为太傅的痴情而对太傅产生了刻骨铭心的情愫，深陷其中，无法自拔。明薇深刻知道这个爱情可能会在太傅恢复了穆廷州的记忆后而走向悲剧，但是她依旧同意了太傅的求娶，爱的义无反顾。果然，就在他们成亲的当天，太傅“死了”，穆廷州恢复了记忆，却忘记了所有关于《一代首傅》和失忆后一年里的所有事情，丝毫不剩，全忘了。此刻穆廷州对明薇的感觉只有陌生，而这种陌生感让明薇认知到一个事实，她男朋友死了。穆廷州为人正直，但是情商低，他想在物质方面给予明薇补偿，但是结果适得其反，明薇认为穆廷州的这种行为是对她和太傅之间忠贞的爱情的亵渎。明薇用了很久时间才能从悲伤中走出来，她把与太傅相处的日子的记忆珍藏在心中，恢复了正常的拍摄工作。穆廷州偶尔能够通过太傅在一年里留下的生活痕迹中了解到了明薇和太傅的过往，并且在新剧梁祝中，再一次和明薇合作拍摄。在长久的拍摄过程中，穆廷州发现他再次爱上了明薇，这不是受太傅的记忆影响，而是无论穆廷州和太傅爱上明薇都是遵随内心深处的感情，因为他们仅仅是一个人，是同一颗心在跳动。最后穆廷州努力追回了明薇，守得云开见月明，有情人终成眷属。在故事的大结局，穆廷州和明薇举行了古式的婚礼，弥补了《一代首傅》的遗憾，也为他们的故事给出一个美好的结局。</p>
<p>整部戏把故事诠释的非常好，所有所有的演员的演技都非常精湛，非常入戏。唯一不足的地方可能就是穆廷州恢复记忆后又爱上明薇这个过程处理的略微有点马虎，虽然他们爱情重圆是必然的结果，但是个人觉得《梁祝》的合作过程可以更详细，更动人的，我个人本来就非常喜欢梁祝这个故事。但是总体来说这部戏都是非常不错的。</p>
<p>就如最开头所写的一样，凄美，有遗憾的情感可以在我心头萦绕很久很久。无论《一代首傅》还是现实中的太傅和明薇的感情，都是充满了遗憾，牵动着我的内心，以至于我不得不写下这篇读后感来慰藉内心。感动的地方很多很多，台词设计也非常棒，而其中印象最深就是穆廷州恢复记忆后想在物质方面补偿明薇，这个行为在明薇眼中是对她的感情和付出的嘲笑，于是明薇的台词是：</p>
<blockquote>
<p>我跟太傅真情实意谈的那场恋爱，在你这儿，就成了赠送给观众的番外，我跟太傅谈的都是真感情，而你口口声声跟我谈的都是金钱。</p>
</blockquote>
<p>这一句话，可以看出明薇对和太傅之间的那段爱情到底有多么多么的珍视，以至于不允许丝毫玷污。面对一个跟自己相爱的人相同的一副身躯，却遭受他利用金钱来衡量自己珍视万分的爱情的这种行为，我想此时此刻的明薇内心已经死透了，没有了任何妄想和所谓的“可能”，她实实在在的接受了男友去世这个事实。这一刻我真的控制不住自己泪腺的开关了。</p>
<p>太傅和明薇之间短暂的爱情就是我心中认为的遗憾，他们没有完成的婚礼就是一个圆满中的缺，即便最后穆廷州与明薇还是在一起了，但是总觉穆廷州并非太傅，毕竟他们的刘海不一样，那个深爱公主的太傅可能真的离开了，如果丰富《梁祝》的剧情可能就能很好的减轻这种遗憾。</p>
<p>我非常敬佩和喜欢太傅和明薇那种为了爱的义无反顾，只要认定对方是自己珍视的人，便可用生命去争取和守护。这里想到《尚食》中子衿的一句话，我觉得用在这里非常贴切。</p>
<blockquote>
<p>亦余心之所向矣，虽九死其犹不悔。</p>
</blockquote>
<p>其实剧中除了男女爱情值得敬佩和喜爱之外，还有友爱和家爱都非常的值得细品。虽然，我不能从这部戏中提炼出多少道理，但是仅仅一个“爱”就值得我长久铭记。</p>
<p>人立于世，不能没有爱，无论去爱还是被爱，都是一个人应有的义务和权利。爱很可能就是一个人书写完一生最大的动力。</p>
<p>感谢《影帝的公主》的所有参与者！</p>
]]></content>
      <categories>
        <category>感性</category>
      </categories>
  </entry>
</search>
